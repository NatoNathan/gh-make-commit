#!/usr/bin/env bash
set -e

# Determine if an gum is in the PATH
if ! type -p gum >/dev/null; then
  echo "gum not found on the system" >&2
  exit 1
fi

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-s ]

gh-make-commit a simple tool to make standardised commit messages


Available options:

-h, --help          Print this help and exit
-e, --[no-]edit     Sets the edit flag on the git commit command (default: true)
-s, --scope-file    Set a file that contans a list of scopes
EOF
  exit 0
}

commitTypes="fix\nfeat\ndocs\nstyle\nrefactor\ntest\nchore\nrevert"

scopeFile=$(pwd)/.scopes

edit="-e"
dry_run=""
while [ $# -gt 0 ]; do
  case "$1" in
  -e|--edit)
    edit="-e"
    ;;
  --no-edit)
    edit=""
    ;;
  -s|--scope-file)
    scopeFile="$2"
    shift
    ;;
  --dry-run)
    dry_run=1
  ;;
  -h|--help)
    usage
    ;;
  esac
  shift
done

TYPE=$(echo -e $commitTypes | gum filter --no-strict --prompt="Pick Commit Type: " )

if test -f "$scopeFile"; then
    SCOPE=$(cat $scopeFile | gum filter --no-strict --prompt="Pick Commit Scope: " )
else
    SCOPE=$(gum input --placeholder "scope" --header="Pick Commit Scope: ")
fi

test -n "$SCOPE" && SCOPE="($SCOPE)"


SUMMARY=$(gum input --header="Enter Commit Summary: " --value "$TYPE$SCOPE: " --width 50 --char-limit=50 --placeholder "Summary of this change")
DESCRIPTION=$(gum write --header="Enter Commit Details: "  --width 80 --placeholder "Details of this change (CTRL+D to finish)")


if [ -n "$dry_run" ]; then 
    cat <<EOF
$SUMMARY
$DESCRIPTION
EOF
else
    git commit -m "$SUMMARY" -m "$DESCRIPTION" "$edit"
fi